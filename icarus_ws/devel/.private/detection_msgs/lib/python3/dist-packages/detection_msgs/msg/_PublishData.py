# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from detection_msgs/PublishData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PublishData(genpy.Message):
  _md5sum = "f4b61fe310b89fdf6b4906adea5d07ba"
  _type = "detection_msgs/PublishData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 id
float64[] real_distance
float64 estimated_distance
bool use_depth
float64 center_x
float64 center_y
float64 error_heading
float64 error_altitude
float64 altitude
float64 controller_error
float64 control_output
bool target_lost
bool target_detected
float64 distance_cnst
float64 distance_imm
float64 distance_singer
float64 target_x
float64 target_y
float64 uav_x
float64 uav_y
float64 real_target_x
float64 real_target_y
float64 estimated_target_x
float64 estimated_target_y
float64 Vx
float64 Vy
float64 Vz"""
  __slots__ = ['id','real_distance','estimated_distance','use_depth','center_x','center_y','error_heading','error_altitude','altitude','controller_error','control_output','target_lost','target_detected','distance_cnst','distance_imm','distance_singer','target_x','target_y','uav_x','uav_y','real_target_x','real_target_y','estimated_target_x','estimated_target_y','Vx','Vy','Vz']
  _slot_types = ['int64','float64[]','float64','bool','float64','float64','float64','float64','float64','float64','float64','bool','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,real_distance,estimated_distance,use_depth,center_x,center_y,error_heading,error_altitude,altitude,controller_error,control_output,target_lost,target_detected,distance_cnst,distance_imm,distance_singer,target_x,target_y,uav_x,uav_y,real_target_x,real_target_y,estimated_target_x,estimated_target_y,Vx,Vy,Vz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PublishData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.real_distance is None:
        self.real_distance = []
      if self.estimated_distance is None:
        self.estimated_distance = 0.
      if self.use_depth is None:
        self.use_depth = False
      if self.center_x is None:
        self.center_x = 0.
      if self.center_y is None:
        self.center_y = 0.
      if self.error_heading is None:
        self.error_heading = 0.
      if self.error_altitude is None:
        self.error_altitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.controller_error is None:
        self.controller_error = 0.
      if self.control_output is None:
        self.control_output = 0.
      if self.target_lost is None:
        self.target_lost = False
      if self.target_detected is None:
        self.target_detected = False
      if self.distance_cnst is None:
        self.distance_cnst = 0.
      if self.distance_imm is None:
        self.distance_imm = 0.
      if self.distance_singer is None:
        self.distance_singer = 0.
      if self.target_x is None:
        self.target_x = 0.
      if self.target_y is None:
        self.target_y = 0.
      if self.uav_x is None:
        self.uav_x = 0.
      if self.uav_y is None:
        self.uav_y = 0.
      if self.real_target_x is None:
        self.real_target_x = 0.
      if self.real_target_y is None:
        self.real_target_y = 0.
      if self.estimated_target_x is None:
        self.estimated_target_x = 0.
      if self.estimated_target_y is None:
        self.estimated_target_y = 0.
      if self.Vx is None:
        self.Vx = 0.
      if self.Vy is None:
        self.Vy = 0.
      if self.Vz is None:
        self.Vz = 0.
    else:
      self.id = 0
      self.real_distance = []
      self.estimated_distance = 0.
      self.use_depth = False
      self.center_x = 0.
      self.center_y = 0.
      self.error_heading = 0.
      self.error_altitude = 0.
      self.altitude = 0.
      self.controller_error = 0.
      self.control_output = 0.
      self.target_lost = False
      self.target_detected = False
      self.distance_cnst = 0.
      self.distance_imm = 0.
      self.distance_singer = 0.
      self.target_x = 0.
      self.target_y = 0.
      self.uav_x = 0.
      self.uav_y = 0.
      self.real_target_x = 0.
      self.real_target_y = 0.
      self.estimated_target_x = 0.
      self.estimated_target_y = 0.
      self.Vx = 0.
      self.Vy = 0.
      self.Vz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_q().pack(_x))
      length = len(self.real_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.real_distance))
      _x = self
      buff.write(_get_struct_dB7d2B14d().pack(_x.estimated_distance, _x.use_depth, _x.center_x, _x.center_y, _x.error_heading, _x.error_altitude, _x.altitude, _x.controller_error, _x.control_output, _x.target_lost, _x.target_detected, _x.distance_cnst, _x.distance_imm, _x.distance_singer, _x.target_x, _x.target_y, _x.uav_x, _x.uav_y, _x.real_target_x, _x.real_target_y, _x.estimated_target_x, _x.estimated_target_y, _x.Vx, _x.Vy, _x.Vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.real_distance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 179
      (_x.estimated_distance, _x.use_depth, _x.center_x, _x.center_y, _x.error_heading, _x.error_altitude, _x.altitude, _x.controller_error, _x.control_output, _x.target_lost, _x.target_detected, _x.distance_cnst, _x.distance_imm, _x.distance_singer, _x.target_x, _x.target_y, _x.uav_x, _x.uav_y, _x.real_target_x, _x.real_target_y, _x.estimated_target_x, _x.estimated_target_y, _x.Vx, _x.Vy, _x.Vz,) = _get_struct_dB7d2B14d().unpack(str[start:end])
      self.use_depth = bool(self.use_depth)
      self.target_lost = bool(self.target_lost)
      self.target_detected = bool(self.target_detected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_q().pack(_x))
      length = len(self.real_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.real_distance.tostring())
      _x = self
      buff.write(_get_struct_dB7d2B14d().pack(_x.estimated_distance, _x.use_depth, _x.center_x, _x.center_y, _x.error_heading, _x.error_altitude, _x.altitude, _x.controller_error, _x.control_output, _x.target_lost, _x.target_detected, _x.distance_cnst, _x.distance_imm, _x.distance_singer, _x.target_x, _x.target_y, _x.uav_x, _x.uav_y, _x.real_target_x, _x.real_target_y, _x.estimated_target_x, _x.estimated_target_y, _x.Vx, _x.Vy, _x.Vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.real_distance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 179
      (_x.estimated_distance, _x.use_depth, _x.center_x, _x.center_y, _x.error_heading, _x.error_altitude, _x.altitude, _x.controller_error, _x.control_output, _x.target_lost, _x.target_detected, _x.distance_cnst, _x.distance_imm, _x.distance_singer, _x.target_x, _x.target_y, _x.uav_x, _x.uav_y, _x.real_target_x, _x.real_target_y, _x.estimated_target_x, _x.estimated_target_y, _x.Vx, _x.Vy, _x.Vz,) = _get_struct_dB7d2B14d().unpack(str[start:end])
      self.use_depth = bool(self.use_depth)
      self.target_lost = bool(self.target_lost)
      self.target_detected = bool(self.target_detected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dB7d2B14d = None
def _get_struct_dB7d2B14d():
    global _struct_dB7d2B14d
    if _struct_dB7d2B14d is None:
        _struct_dB7d2B14d = struct.Struct("<dB7d2B14d")
    return _struct_dB7d2B14d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
