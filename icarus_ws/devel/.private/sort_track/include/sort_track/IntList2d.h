// Generated by gencpp from file sort_track/IntList2d.msg
// DO NOT EDIT!


#ifndef SORT_TRACK_MESSAGE_INTLIST2D_H
#define SORT_TRACK_MESSAGE_INTLIST2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sort_track/IntList.h>

namespace sort_track
{
template <class ContainerAllocator>
struct IntList2d_
{
  typedef IntList2d_<ContainerAllocator> Type;

  IntList2d_()
    : data2d()  {
    }
  IntList2d_(const ContainerAllocator& _alloc)
    : data2d(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::sort_track::IntList_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sort_track::IntList_<ContainerAllocator> >> _data2d_type;
  _data2d_type data2d;





  typedef boost::shared_ptr< ::sort_track::IntList2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sort_track::IntList2d_<ContainerAllocator> const> ConstPtr;

}; // struct IntList2d_

typedef ::sort_track::IntList2d_<std::allocator<void> > IntList2d;

typedef boost::shared_ptr< ::sort_track::IntList2d > IntList2dPtr;
typedef boost::shared_ptr< ::sort_track::IntList2d const> IntList2dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sort_track::IntList2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sort_track::IntList2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sort_track::IntList2d_<ContainerAllocator1> & lhs, const ::sort_track::IntList2d_<ContainerAllocator2> & rhs)
{
  return lhs.data2d == rhs.data2d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sort_track::IntList2d_<ContainerAllocator1> & lhs, const ::sort_track::IntList2d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sort_track

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sort_track::IntList2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sort_track::IntList2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sort_track::IntList2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sort_track::IntList2d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sort_track::IntList2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sort_track::IntList2d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sort_track::IntList2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d7b9704b92687ed27b85eeae87a237e";
  }

  static const char* value(const ::sort_track::IntList2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d7b9704b92687edULL;
  static const uint64_t static_value2 = 0x27b85eeae87a237eULL;
};

template<class ContainerAllocator>
struct DataType< ::sort_track::IntList2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sort_track/IntList2d";
  }

  static const char* value(const ::sort_track::IntList2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sort_track::IntList2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "IntList[] data2d\n"
"\n"
"================================================================================\n"
"MSG: sort_track/IntList\n"
"int32[] data\n"
;
  }

  static const char* value(const ::sort_track::IntList2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sort_track::IntList2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntList2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sort_track::IntList2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sort_track::IntList2d_<ContainerAllocator>& v)
  {
    s << indent << "data2d[]" << std::endl;
    for (size_t i = 0; i < v.data2d.size(); ++i)
    {
      s << indent << "  data2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sort_track::IntList_<ContainerAllocator> >::stream(s, indent + "    ", v.data2d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SORT_TRACK_MESSAGE_INTLIST2D_H
